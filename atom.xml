<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>junely-渡渡</title>
  
  <subtitle>学习笔记，乐于分享，每天进步一点点，坚持是成功的法宝。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cgirl.github.io/"/>
  <updated>2020-09-08T22:41:07.511Z</updated>
  <id>https://cgirl.github.io/</id>
  
  <author>
    <name>junelyy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx的常用配置与属性</title>
    <link href="https://cgirl.github.io/2020/09/09/nginx/nginx200610/"/>
    <id>https://cgirl.github.io/2020/09/09/nginx/nginx200610/</id>
    <published>2020-09-08T22:41:07.511Z</published>
    <updated>2020-09-08T22:41:07.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令行指令"><a href="#命令行指令" class="headerlink" title="命令行指令"></a>命令行指令</h1><p>重载-不重新启动nginx的情况下，重新加载新修改的配置文件：<br>nginx -s reload</p><p>热部署-业务需要，nginx重新编译增加了新的第三方模块，但是线上环境正在运行，不能冒昧的重启nginx，因为有很多正常请求的还未结束，这种场景下可以使用热部署方式。新产生的请求使用新的nginx，而老的请求暂时使 1000用老的nginx，等待全部老请求执行完毕，再关闭老的nginx：<br>cp nginx nginx.old<br>kill -USR2 nginx的主进程号<br>kill -WINCH nginx的主进程号</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;命令行指令&quot;&gt;&lt;a href=&quot;#命令行指令&quot; class=&quot;headerlink&quot; title=&quot;命令行指令&quot;&gt;&lt;/a&gt;命令行指令&lt;/h1&gt;&lt;p&gt;重载-不重新启动nginx的情况下，重新加载新修改的配置文件：&lt;br&gt;nginx -s reload&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="技术架构" scheme="https://cgirl.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="nginx" scheme="https://cgirl.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>区块链带来的新机遇</title>
    <link href="https://cgirl.github.io/2017/12/17/qkl/qukuailian171218/"/>
    <id>https://cgirl.github.io/2017/12/17/qkl/qukuailian171218/</id>
    <published>2017-12-17T13:59:42.000Z</published>
    <updated>2020-09-08T22:41:07.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第2章-区块链带来的新机遇"><a href="#第2章-区块链带来的新机遇" class="headerlink" title="第2章 区块链带来的新机遇"></a>第2章 区块链带来的新机遇</h1><h2 id="数字货币产业链"><a href="#数字货币产业链" class="headerlink" title="数字货币产业链"></a>数字货币产业链</h2><h2 id="互联网金融"><a href="#互联网金融" class="headerlink" title="互联网金融"></a>互联网金融</h2><h2 id="物联网与共享经济"><a href="#物联网与共享经济" class="headerlink" title="物联网与共享经济"></a>物联网与共享经济</h2><h2 id="新一代基础设施"><a href="#新一代基础设施" class="headerlink" title="新一代基础设施"></a>新一代基础设施</h2><h1 id="第3章-区块链的应用场景"><a href="#第3章-区块链的应用场景" class="headerlink" title="第3章 区块链的应用场景"></a>第3章 区块链的应用场景</h1><h2 id="数字货币"><a href="#数字货币" class="headerlink" title="数字货币"></a>数字货币</h2><h2 id="众筹"><a href="#众筹" class="headerlink" title="众筹"></a>众筹</h2><h2 id="清算、结算与审计"><a href="#清算、结算与审计" class="headerlink" title="清算、结算与审计"></a>清算、结算与审计</h2><h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><h2 id="版权与许可"><a href="#版权与许可" class="headerlink" title="版权与许可"></a>版权与许可</h2><h2 id="公证与记录"><a href="#公证与记录" class="headerlink" title="公证与记录"></a>公证与记录</h2><h1 id="第4章-区块链技术原理"><a href="#第4章-区块链技术原理" class="headerlink" title="第4章 区块链技术原理"></a>第4章 区块链技术原理</h1><h2 id="密码学基础"><a href="#密码学基础" class="headerlink" title="密码学基础"></a>密码学基础</h2><h2 id="区块链组成"><a href="#区块链组成" class="headerlink" title="区块链组成"></a>区块链组成</h2><h2 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h2><h2 id="侧链技术"><a href="#侧链技术" class="headerlink" title="侧链技术"></a>侧链技术</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第2章-区块链带来的新机遇&quot;&gt;&lt;a href=&quot;#第2章-区块链带来的新机遇&quot; class=&quot;headerlink&quot; title=&quot;第2章 区块链带来的新机遇&quot;&gt;&lt;/a&gt;第2章 区块链带来的新机遇&lt;/h1&gt;&lt;h2 id=&quot;数字货币产业链&quot;&gt;&lt;a href=&quot;#数字
      
    
    </summary>
    
      <category term="区块链:定义未来金融与经济新格局" scheme="https://cgirl.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E5%AE%9A%E4%B9%89%E6%9C%AA%E6%9D%A5%E9%87%91%E8%9E%8D%E4%B8%8E%E7%BB%8F%E6%B5%8E%E6%96%B0%E6%A0%BC%E5%B1%80/"/>
    
    
      <category term="读书摘录 区块链" scheme="https://cgirl.github.io/tags/%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95-%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>区块链是什么</title>
    <link href="https://cgirl.github.io/2017/12/17/qkl/qukuailian171217/"/>
    <id>https://cgirl.github.io/2017/12/17/qkl/qukuailian171217/</id>
    <published>2017-12-17T08:31:10.000Z</published>
    <updated>2020-09-08T22:41:07.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记账货币"><a href="#记账货币" class="headerlink" title="记账货币"></a>记账货币</h2><p>区块链的本质是一种去中心化的记账系统，而比特币正是这个系统上承载的“以数字形式存在”的货币。我们可以认为区块链与比特币之间的关系就是凯恩斯所说的记账货币与货币之间的关系，也可以用菲利克斯-马丁对货币的理解来说明两者的关系–比特币只是记账的表征，而区块链就是背后的一套由信用记录以及用心记录的清算构成的体系。</p><h2 id="天才的发明"><a href="#天才的发明" class="headerlink" title="天才的发明"></a>天才的发明</h2><p>要了解比特币的内在优雅。不是软件使得比特币如此有效，而是经济学。–罗比特-沃伦斯基</p><p>因为账本上的内容必须是唯一的，所以就导致记账是一种天然的中心化行为。在通信手段不发达的时代，这是必然的选择；在如今的信息时代，中心化的记账方式依然覆盖了社会的方方面面。然而，中心化的记账却有一些显而易见的弱点：一旦这个中心出现问题，如被篡改、被损坏，整个系统就会面临危机乃至崩溃。</p><p>这种中心化的记账方式对中心本身的能力、相应的监管法律和手段以及参与者对其的信任都有极高的要求。</p><p>那么区块链是靠怎样的架构设计最终解决了去中心化记账的难题呢？竞争记账机制成为了解决问题的关键。<br>这里我们先引入一个称为“节点”的概念。在当前的信息时代，负责记账的自然是计算机，而在记账系统中接入的每一台计算机都可以称作节点。</p><p>所谓的竞争记账，就是以每个节点的计算能力（“算力”）来竞争记账权的一种机制。在比特币系统中，大约每十分钟进行一轮算力竞赛，竞赛的胜利者获得一次记账的权利，即向区块链这个总账本写入一个新区块的权利。这样，在一定时间内，只有竞争的胜利者才能完成一轮记账并向其他节点同步新增账本信息，这个过程就是区块产生的过程。</p><p>不过，算力竞争是要付出成本的，没有激励，节点就没有进行竞争的动力。在中本聪的设计里，每轮竞争胜出并完成记账的节点将可以获得系统给予的一定数量的比特币奖励。这个奖励的过程同时也是比特币的发行过程。节点不停的进行计算，以期获得系统发放的比特币。</p><p>最终，区块链通过构造一个竞争-记账-奖励为核心的经济系统，解决了去中心化记账的难题。比特币借助区块链打造了一个正向循环的经济系统，才使得起在没有强大的中心化机构或组织推动的情况下，自然的生长出来并发展壮大。</p><h2 id="共识机制与价值载体"><a href="#共识机制与价值载体" class="headerlink" title="共识机制与价值载体"></a>共识机制与价值载体</h2><p>比特币区块链的共识机制是通过工作证明（POW）来实现的，这种机制的优点是显而易见的，每个节点可以平等地参与竞争，并通过激励构建了一个正循环的经济系统，从而逐渐积累了保护系统安全的庞大算力。</p><p>然而对工作量证明机制也有一些批评。一个常见的指责是“浪费”能源，因为节点进行算力竞赛是要消耗电力的。目前，投入挖矿竞争的总算力以及接近投入挖矿竞争的总算力以及接近1300P，挖矿也因此成了能源秘籍型的行业。</p><p>所谓公有链，是指比特币区块链这样的完全去中心化的、不受任何机构控制的区块链；而私有链则是指存在一定的中心化控制的区块链。</p><p>类似比特币区块链这样的公有链尚不能满足金融机构的一些基本要求，比如了解你的客户（KYC）、反洗钱（AML）等，因此，金融机构对私有链的兴趣更大。目前私有链最著名的例子是R3CEV公司牵头的区块链联名，它已经吸引了全球四十多家大型银行的加入，其中不乏美国银行、摩根大通等巨头的身影。</p><p>事实上，自比特币诞生之日起，它的模仿者或者竞争者就层出不穷。其中有很多都只是对比特币简单的复制和模仿，没有任何创新，我们将这种成为山寨币。还有一些并不是简单的模仿，而是有自己的创新和专注的领域，这种类型的币我们称之为竞争币。在数字货币的市值方面，尽管比特币遥遥领先，但之后诞生的莱特币、以太坊的市值都蹭短暂地超过10亿美元。</p><p>数字资产和区块链具有天然的亲和性。一般意义上讲，数字资产包含任何形式的以二进制格式存在并且具备所有权属性的东西。而在较为狭义的理解中，数字资产则是指以电子数据形式存在的，在日常生活中持有以备出售的非货币性资产，比如典型是股票、债券等金融产品。</p><p>如果说比特币等基于区块链的数字货币是一个刚诞生不久的婴儿，那么基于区块链的非货币形式的价值承载则还是一个孕育中的胚胎。作为价值载体，区块链可以承载的价值是非常丰富的。随着区块链技术的发展和相关基础设施的不断完善，我们相信区块链承载价值的范围不断扩大。</p><h2 id="当交易变得智能"><a href="#当交易变得智能" class="headerlink" title="当交易变得智能"></a>当交易变得智能</h2><p>比特币的脚本语言非常简单，仅有256条指令，其中75个是被保留的，尚未被赋予任何含义。比特币脚本中的指令与其他编程语言类似，包含基本的语法、逻辑。除此之外还包括一些加密指令，如哈密函数、签名验证等。</p><p>比特币的多重签名技术就是使用脚本实现可变成交易的一个典型例子。其基本原理是，在系统里创建一个由多个人共同管理的账户，只有达到事先约定数量的人的同意，才能动用该账户的钱，并且这个过程是由系统本身保障执行的，不需要任何第三方介入。</p><p>一般来说，一个比特币地址对应一个私钥，动用这个地址中的资金只需要该私钥的掌握者单独发起签名即可。而多重签名技术就是多个私钥的共同签名才能动用一笔资金。比如说，某笔资金对应3个私钥，而必须至少有其中任意2个私钥参与签名才能动用，只有1个私钥参与签名是无效的。这个2/3可以推广到任意的m/n，比如3/5，4/7,6/11等，当然m要小于等于n。</p><p>从本质上讲，智能合约工作原理类似于计算机程序的条件执行语句。当一个预先编好的条件被触发时，智能合约执行相关的合同条款。由于区块链的可编程性，因此智能合约在区块链和数字货币上的应用是水到渠成的事情。</p><p>智能合约是计算机程序，所以很容易应用于其他需要的场景–增加更加细致的控制条件，完成更复杂的执行逻辑。这点类似传统的合同，我们也可以认为，智能合约就是合同以代码的形式搬到了区块链上，但这就带来了根本的区别：它不需要任何人监督合同的执行，订立合同的双方也无法在合同完成前单方面违约，一切都是按合同的约定自动执行的。相信随着区块链的普及和交易智能化的发展，它将会对未来的交易模式与商业结构带来巨大的影响。</p><h2 id="将区块链连接起来"><a href="#将区块链连接起来" class="headerlink" title="将区块链连接起来"></a>将区块链连接起来</h2><p>中本聪创造区块链的初衷是为了实现一个点对点的电子现金系统。因此，当我们对于区块链的用途有更高的期待时，它的一些局限就体现出来了。</p><p>本质上，区块链是不同数字价值的载体，而侧链技术则是连接不同区块链的通路。现在还不能断言最终成熟的侧链技术形态，甚至我们也不知道未来真正大规模应用于区块链件连接的技术是否会以“侧链技术”的名义出现，但是侧链技术的理念及核心功能的发展与成熟是毋庸置疑的。</p><h2 id="区块链的未来"><a href="#区块链的未来" class="headerlink" title="区块链的未来"></a>区块链的未来</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记账货币&quot;&gt;&lt;a href=&quot;#记账货币&quot; class=&quot;headerlink&quot; title=&quot;记账货币&quot;&gt;&lt;/a&gt;记账货币&lt;/h2&gt;&lt;p&gt;区块链的本质是一种去中心化的记账系统，而比特币正是这个系统上承载的“以数字形式存在”的货币。我们可以认为区块链与比特币之间的
      
    
    </summary>
    
      <category term="区块链:定义未来金融与经济新格局" scheme="https://cgirl.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E5%AE%9A%E4%B9%89%E6%9C%AA%E6%9D%A5%E9%87%91%E8%9E%8D%E4%B8%8E%E7%BB%8F%E6%B5%8E%E6%96%B0%E6%A0%BC%E5%B1%80/"/>
    
    
      <category term="读书摘录 区块链" scheme="https://cgirl.github.io/tags/%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95-%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>必然的出现</title>
    <link href="https://cgirl.github.io/2017/11/12/qkl/qukuailian171214/"/>
    <id>https://cgirl.github.io/2017/11/12/qkl/qukuailian171214/</id>
    <published>2017-11-12T14:44:36.000Z</published>
    <updated>2020-09-08T22:41:07.512Z</updated>
    
    <content type="html"><![CDATA[<p>junely-渡渡君目前从事互联网金融，那做互金的小伙伴都知道，最近炒的热火朝天，朝天热火的莫过于“区块链”先森了。我这么猴急追求前沿技术的M子，岂能坐视无为？那必须走起啊，必须要追上“区块链”先森的，说走咱就走。接下来要介绍两本关于区块链的书籍，首先精读第一本书《区块链:定义未来金融与经济新格局》。</p><p><img src="/image/qukuanlian/区块链:定义未来金融与经济新格局.jpg" alt="封面"></p><p>本书一共有5章，我们且慢慢道来，junely-渡渡君将里面自认精华的部分摘录出来，因此后续内容均来源于此书摘录，版权归原作者所有哦～</p><p>目前世界上几乎所有国家的货币都已是信用货币。信用货币是货币发展中的现代形态,不再代表任何贵金属,并且其本身价值远远低于货币价值,已经和商品属性彻底脱钩。</p><p>在实物货币阶段,货币以实物商品的形式表现出来。从表面上看货币是有价值的商品,但是,人们出卖商品换取实物货币时需要的不是实物货币本身,而是实物货币交换其他商品的能力,即购买力。换句话说,人们之所以能接受实物货币,本质上并不是因为实物货币是有价值的商品,而是因为其相信实物货币是信用的象征,它可以提供一般购买力。所以无论是实物货币还是信用货币,信用都是货币更为本职的属性。也可以说,信用是货币的创造者。</p><p>互联网的核心精神是开放、共享、去中心化、自下而上、多元价值等，这些说法没有错，但绝不是由于互联网的出现才产生的，而是因为市场这只看不见的手导致人类社会本身就是有这种天然倾向。技术的进步导致交流更为高效，这样的强项也就被进一步放大。所谓互联网精神，只是由于拥有了新的信息传递工作，是人类行为的自然投射。</p><p>信用是制造货币的真正原材料。而区块链通过构造一个可以量化信用的经济系统，使得一个点对点的电子现金系统–比特币的出现成为可能。或者说，区块链创造了一个数字化的、可以点对点传输价值的信用系统。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;junely-渡渡君目前从事互联网金融，那做互金的小伙伴都知道，最近炒的热火朝天，朝天热火的莫过于“区块链”先森了。我这么猴急追求前沿技术的M子，岂能坐视无为？那必须走起啊，必须要追上“区块链”先森的，说走咱就走。接下来要介绍两本关于区块链的书籍，首先精读第一本书《区块链:
      
    
    </summary>
    
      <category term="区块链:定义未来金融与经济新格局" scheme="https://cgirl.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E5%AE%9A%E4%B9%89%E6%9C%AA%E6%9D%A5%E9%87%91%E8%9E%8D%E4%B8%8E%E7%BB%8F%E6%B5%8E%E6%96%B0%E6%A0%BC%E5%B1%80/"/>
    
    
      <category term="读书摘录 区块链" scheme="https://cgirl.github.io/tags/%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95-%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置</title>
    <link href="https://cgirl.github.io/2017/07/13/ngnix/"/>
    <id>https://cgirl.github.io/2017/07/13/ngnix/</id>
    <published>2017-07-13T13:17:00.000Z</published>
    <updated>2020-09-08T22:41:07.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><h2 id="文件路径配置"><a href="#文件路径配置" class="headerlink" title="文件路径配置"></a>文件路径配置</h2><ul><li><p>访问首页</p><blockquote><p>语法： index file1 file2 file3 … ;<br><br>配置块： http, server, location</p></blockquote></li></ul><a id="more"></a><ul><li><p>HTTP错误码重定向页面</p><blockquote><p>语法： error_page code[code1 code2 …][=|answer_code=]uri|@named_location;<br><br>配置块： http, server, location, if</p></blockquote></li><li><p>是否允许递归使用error_page</p><blockquote><p>语法： recursive_error_page [on|off];<br><br>配置块： http，server，location</p></blockquote></li><li><p>try_files</p></li></ul><h2 id="内存及磁盘资源分配"><a href="#内存及磁盘资源分配" class="headerlink" title="内存及磁盘资源分配"></a>内存及磁盘资源分配</h2><ul><li><p>HTTP包体只存储到磁盘文件中</p><blockquote><p>语法： client_body_only_in_file on|off|clean;<br><br>配置块： http，server，location</p></blockquote></li><li><p>HTTP包体尽量写到一个内存buffer中</p><blockquote><p>语法： client_body_in_single_buffer size;<br><br>配置块： http，server</p></blockquote></li><li><p>存储超大HTTP头部的内存buffer的大小</p><blockquote><p>语法： large_client_header_buffers number size;<br><br>配置块： http，server</p></blockquote></li><li><p>存储HTTP包体的内存buffer的大小</p><blockquote><p>语法： large_client_body_buffer_size size;<br><br>配置块： http，server，location</p></blockquote></li><li><p>HTTP的临时存放目录</p><blockquote><p>语法： client_body_temp_path dirpath[level1[level2[level2]]];<br><br>配置块： http，server，location</p></blockquote></li><li><p>建立TCP链接预配内存池初始化大小</p><blockquote><p>语法： connect_pool_size size;<br><br>配置块： http，server</p></blockquote></li><li><p>请求预配内存池大小</p><blockquote><p>语法: request_pool_size size;<br><br>配置块: http, server</p></blockquote></li></ul><h2 id="网络连接的设置"><a href="#网络连接的设置" class="headerlink" title="网络连接的设置"></a>网络连接的设置</h2><ul><li><p>读取HTTP头部的超时时间</p><blockquote><p>语法: client_header_timeout time;（默认单位:秒）<br><br>配置块: http, server, location</p></blockquote></li><li><p>读取HTTP包体的超时时间</p><blockquote><p>语法: client_body_timeout time;（默认单位:秒）<br><br>配置块: http, server, location</p></blockquote></li><li><p>发送响应的超时时间</p><blockquote><p>语法: send_timeout time;<br><br>配置块: http, server, location</p></blockquote></li><li><p>发送RST包来重置连接</p><blockquote><p>语法: reset_timeout_connection on|off;<br><br>配置块: http, server, location</p></blockquote></li><li><p>关闭用户的连接方式</p><blockquote><p>语法： lingering_close on|off|always<br><br>配置块： http, server, location</p></blockquote></li><li><p>关闭用户的链接方式的延迟时间</p><blockquote><p>语法： lingering_time time;<br><br>配置块： http, server, location</p></blockquote></li><li><p>无数据情况下关闭用户链接的超时时间</p><blockquote><p>语法： lingering_timeout time;<br><br>配置块： http, server, location</p></blockquote></li><li><p>禁用多个http请求复用同一个http长链接（禁用keepalive功能）</p><blockquote><p>语法： keepalive_disable [msie6|safria|none]…;<br><br>配饰块： http, server, location</p></blockquote></li><li><p>keepalive超时时间</p><blockquote><p>语法： keepalive_timeout time;<br><br>配置块： http, server, location</p></blockquote></li><li><p>一个keepalive长连接上允许承载的最大请求数</p><blockquote><p>语法： keepalive_requests n;<br><br>配置块： http, server, location</p></blockquote></li><li><p>对keepalive是否启用TCP_NODELAY选项</p><blockquote><p>语法： tcp_nodelay on|off;<br><br>配置块： http, server, location</p></blockquote></li><li><p>是否开启FreeBSD系统上的TCP_NOPUSH或linux系统上的TCP_CORK功能</p><blockquote><p>语法： tcp_nopush on|off;<br><br>配置块： http, server, location</p></blockquote></li></ul><h2 id="MIME类型的设置"><a href="#MIME类型的设置" class="headerlink" title="MIME类型的设置"></a>MIME类型的设置</h2><ul><li><p>MIME type与文件扩展映射</p><blockquote><p>语法： type {…};<br><br>配置块： http, server, location</p></blockquote></li><li><p>默认MIME type</p><blockquote><p>语法: default_type MIME-type;<br>配置块: http, server, location</p></blockquote></li><li><p>MIME type散列桶占用内存的大小</p><blockquote><p>语法: types_hash_bucket_size size;<br>配置块: http, server, location</p></blockquote></li><li><p>MIME type散列桶占用最大内存的大小</p><blockquote><p>语法: type_hash_max_size size;<br>配置块: http, server, location</p></blockquote></li></ul><h2 id="对客户端请求的限制"><a href="#对客户端请求的限制" class="headerlink" title="对客户端请求的限制"></a>对客户端请求的限制</h2><ul><li><p>按HTTP方法名限制用户请求</p><blockquote><p>语法: limit_except method … {…};<br>配置块: location</p></blockquote></li><li><p>HTTP请求包体的最大值</p><blockquote><p>语法: clinet_max_body_size size;<br>配置块: http、server、location</p></blockquote></li><li><p>对请求的速度</p><blockquote><p>语法: limit_rate speed;<br>配置块: http、server、location、if</p></blockquote></li><li><p>对请求限速的延迟市场</p><blockquote><p>语法: limit_rate_after time;<br>配置块: http、server、location、if</p></blockquote></li></ul><h2 id="文件操作的优化"><a href="#文件操作的优化" class="headerlink" title="文件操作的优化"></a>文件操作的优化</h2><ul><li><p>sendfile系统调用</p><blockquote><p>语法: sendfile on|off;<br>配置块: http、server、location</p></blockquote></li><li><p>AIO系统调用</p><blockquote><p>语法: aio on|off;<br>配置块: http, server, location</p></blockquote></li><li><p>directio(linux系统以O_DIRECT方式只读文件,缓冲区大小)</p><blockquote><p>语法: directio size|off;<br>配置块: http, server, location</p></blockquote></li><li><p>directio方式读取文件时的对齐方式</p><blockquote><p>语法: directio_alignment size;<br>配置块: http, server, location</p></blockquote></li><li><p>打开缓存功能</p><blockquote><p>语法: open_file_cache max=N[inactive=time]|off;<br>配置块: http, server, location</p></blockquote></li><li><p>是否缓存打开文件错误信息</p><blockquote><p>语法: open_file_cache_errors on|off;<br>配置块: http, server, location</p></blockquote></li><li><p>不被淘汰的最小次数</p><blockquote><p>语法: open_file_cache_min_users number;<br>配置块: http, server, location</p></blockquote></li><li><p>检验缓存中元素有效性的频率</p><blockquote><p>语法: open_file_cache_valid time;<br>配置块: http, server, location</p></blockquote></li></ul><h2 id="对客户端请求的特殊处理"><a href="#对客户端请求的特殊处理" class="headerlink" title="对客户端请求的特殊处理"></a>对客户端请求的特殊处理</h2><ul><li><p>忽略不合法的HTTP头部</p><blockquote><p>语法: ignore_invalid_headers on|off;<br>配置块: http, server</p></blockquote></li><li><p>HTTP头部是否允许下划线</p><blockquote><p>语法: underscores_in_headers on|off;<br>配置块: http, server, location</p></blockquote></li><li><p>对If-Modified-Since头部的策略处理</p><blockquote><p>语法: if_modified_since [off|exact|before];<br>配置块: http, server, location</p></blockquote></li><li><p>文件未找到时是否记录到error日志</p><blockquote><p>语法: log_not_fount off|on;<br>配置块: http, server, location</p></blockquote></li><li><p>是否匹配相邻的’/‘</p><blockquote><p>语法: merge_slashes on|off;<br>配置块: http, server, location</p></blockquote></li><li><p>DNS解析地址</p><blockquote><p>语法: resolver address …;<br>配置块: http, server, location</p></blockquote></li><li><p>DNS解析地址超时时间</p><blockquote><p>语法: resolver_timeout time;<br>配置块: http, server, location</p></blockquote></li><li><p>返回错误页面时,是否在Server中注明nginx版本</p><blockquote><p>语法: server_tokens on|off;<br>配置块: http, server, location</p></blockquote></li></ul><h2 id="ngx-http-core-module模块提供的变量"><a href="#ngx-http-core-module模块提供的变量" class="headerlink" title="ngx_http_core_module模块提供的变量"></a>ngx_http_core_module模块提供的变量</h2><p><img src="/image/nginx/访问上游服务器时可使用的变量.png" alt="访问上游服务器时可使用的变量"></p><h2 id="反向代理服务器的基本原理"><a href="#反向代理服务器的基本原理" class="headerlink" title="反向代理服务器的基本原理"></a>反向代理服务器的基本原理</h2><p>基本原来的流程图如下：</p><p><img src="/image/nginx/反向代理服务器转发请求流程.png" alt="反向代理服务器转发请求流程"></p><h2 id="负载均衡的基本配置"><a href="#负载均衡的基本配置" class="headerlink" title="负载均衡的基本配置"></a>负载均衡的基本配置</h2><ul><li><p>upstream块</p><blockquote><p>语法: upstream name {…};<br>配置块: http  </p></blockquote></li><li><p>server  </p><blockquote><p>语法: server name [parameters];<br>配置块: upstream</p></blockquote></li><li><p>ip_hash</p><blockquote><p>语法: ip_hash;<br>配置块: upstream</p></blockquote></li><li><p>样例:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> tianshenjr &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">#ip_hash; 说明:与weight不可共存;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">server</span> dev.tianshenjr.com weight=<span class="number">4</span>;  </span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;  </span><br><span class="line">    <span class="attribute">server</span> unix:/tmp/api.tianshenjr.com;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">    <span class="attribute">location</span> / &#123;  </span><br><span class="line">        <span class="attribute">proxy_pass</span> http://www.tianshenjr.com  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>记录日志时支持的变量</p></li></ul><h2 id="反向代理的基本配置"><a href="#反向代理的基本配置" class="headerlink" title="反向代理的基本配置"></a>反向代理的基本配置</h2><ul><li><p>proxy_pass</p><blockquote><p>语法: proxy_pass URL;<br>配置块: location, if</p></blockquote></li><li><p>proxy_method</p><blockquote><p>语法: proxy_method method;<br>配置块: http, server, location</p></blockquote></li><li><p>proxy_hide_header</p><blockquote><p>语法: proxy_hide_header the_header;<br>配置块: http, server, location</p></blockquote></li><li><p>proxy_pass_header</p><blockquote><p>语法: proxy_pass_header the_header;<br>配置块: http, server, location</p></blockquote></li><li><p>proxy_pass_request_body</p><blockquote><p>语法: proxy_pass_request_body on|off;<br>配置块: http, server, location</p></blockquote></li><li><p>proxy_pass_request_headers</p><blockquote><p>语法: proxy_pass_request_headers on|off;<br>配置块: http, server, location</p></blockquote></li><li><p>proxy_redirect</p><blockquote><p>语法: proxy_redirect [default|off|redirect replacement];<br>配置块: http, server, location</p></blockquote></li><li><p>proxy_next_upstream</p><blockquote><p>语法: proxy_next_upstream [error|timeout|invalid_header|http_500|http_502|http_503|http_504|http_404|off];<br>配置块: http, server, location</p></blockquote></li></ul><p>扩展阅读<br>   <a href="http://wiki.nginx.org/Modules" target="_blank" rel="noopener">http://wiki.nginx.org/Modules</a></p><h1 id="开发HTTP模块"><a href="#开发HTTP模块" class="headerlink" title="开发HTTP模块"></a>开发HTTP模块</h1><h2 id="如何调用HTTP模块"><a href="#如何调用HTTP模块" class="headerlink" title="如何调用HTTP模块"></a>如何调用HTTP模块</h2><p><img src="/image/nginx/nginx http模块调用简化流程.png" alt="http模块调用简化流程"></p><h2 id="类型封装"><a href="#类型封装" class="headerlink" title="类型封装"></a>类型封装</h2><ul><li><p>整型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">intptr_t</span> <span class="keyword">ngx_int_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uintptr_t</span> <span class="keyword">ngx_uint_t</span>;</span><br></pre></td></tr></table></figure></li><li><p>ngx_str_t 数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">size_t</span>      len;</span><br><span class="line">    u_char      *data;</span><br><span class="line">&#125; <span class="keyword">ngx_str_t</span>;</span><br></pre></td></tr></table></figure></li><li><p>ngx_list_t 数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_list_part_s</span> <span class="title">ngx_list_part_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_list</span> _<span class="title">part_s</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span>                *elts;</span><br><span class="line">    <span class="keyword">ngx_uint_t</span>          nelts;</span><br><span class="line">    <span class="keyword">ngx_list_part_t</span>     *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">ngx_list_part_t</span>     *last;</span><br><span class="line">    <span class="keyword">ngx_list_part_t</span>     part;</span><br><span class="line">    <span class="keyword">size_t</span>              size;</span><br><span class="line">    <span class="keyword">ngx_unit_t</span>          nalloc;</span><br><span class="line">    <span class="keyword">ngx_pool_t</span>          *pool;</span><br><span class="line">&#125; <span class="keyword">ngx_list_t</span>;</span><br></pre></td></tr></table></figure></li><li><p>ngx_table_elt_t 数据结构</p></li><li>ngx_buf_t 数据结构</li><li>ngx_chain_t 数据结构</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nginx配置&quot;&gt;&lt;a href=&quot;#nginx配置&quot; class=&quot;headerlink&quot; title=&quot;nginx配置&quot;&gt;&lt;/a&gt;nginx配置&lt;/h1&gt;&lt;h2 id=&quot;文件路径配置&quot;&gt;&lt;a href=&quot;#文件路径配置&quot; class=&quot;headerlink&quot; title=&quot;文件路径配置&quot;&gt;&lt;/a&gt;文件路径配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;访问首页&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法： index file1 file2 file3 … ;&lt;br&gt;&lt;br&gt;配置块： http, server, location&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nginx" scheme="https://cgirl.github.io/categories/nginx/"/>
    
    
      <category term="nginx 负载均衡 配置" scheme="https://cgirl.github.io/tags/nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>lumen建立API项目</title>
    <link href="https://cgirl.github.io/2017/07/08/lumen/"/>
    <id>https://cgirl.github.io/2017/07/08/lumen/</id>
    <published>2017-07-08T08:18:00.000Z</published>
    <updated>2020-09-08T22:41:07.511Z</updated>
    
    <content type="html"><![CDATA[<p>#lumen环境搭建（5.4.X 版本）</p><h2 id="composer及lumen安装"><a href="#composer及lumen安装" class="headerlink" title="composer及lumen安装"></a>composer及lumen安装</h2><p>环境: mac or linux</p><ul><li>使用如下命令进行comoser的安装:  </li></ul><ol><li>curl -sS <a href="https://getcomposer.org/installer" target="_blank" rel="noopener">https://getcomposer.org/installer</a> | php</li><li>mv composer.phar /usr/local/bin/  </li><li>输入composer回车,能正常展示composer的版本及使用方法,即安装成功</li></ol><a id="more"></a><ul><li>使用如下命令进行lumen的项目创建及环境配置</li></ul><ol><li><p>composer create-project –prefer-dist laravel/lumen 项目名称<br>说明:<br>1) 时间可能会有些长,请耐心等待,如果长时间依然没有创建成功。<br>2) 请更换国内镜像或升级composer<br>更换国内镜像: composer config -g repo.packagist composer <a href="https://packagist.phpcomposer.com）" target="_blank" rel="noopener">https://packagist.phpcomposer.com）</a><br>升级composer: composer selfupdate</p></li><li><p>配置数据库信息:<br>lumen的项目配置信息都保存在.env文件中,修改相应的数据库配置信息:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  【项目的mysql数据库服务器地址】</span><br><span class="line">DB_PORT=<span class="number">3306</span>       【mysql对应的端口号】</span><br><span class="line">DB_DATABASE=mabei  【mysql的数据库名称】</span><br><span class="line">DB_USERNAME=root   【mysql的用户名】</span><br><span class="line">DB_PASSWORD=root   【mysql的密码】</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#lumen环境搭建（5.4.X 版本）&lt;/p&gt;
&lt;h2 id=&quot;composer及lumen安装&quot;&gt;&lt;a href=&quot;#composer及lumen安装&quot; class=&quot;headerlink&quot; title=&quot;composer及lumen安装&quot;&gt;&lt;/a&gt;composer及lumen安装&lt;/h2&gt;&lt;p&gt;环境: mac or linux&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用如下命令进行comoser的安装:  &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;curl -sS &lt;a href=&quot;https://getcomposer.org/installer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://getcomposer.org/installer&lt;/a&gt; | php&lt;/li&gt;
&lt;li&gt;mv composer.phar /usr/local/bin/  &lt;/li&gt;
&lt;li&gt;输入composer回车,能正常展示composer的版本及使用方法,即安装成功&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="lumen框架" scheme="https://cgirl.github.io/categories/lumen%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="php 框架 lumen API" scheme="https://cgirl.github.io/tags/php-%E6%A1%86%E6%9E%B6-lumen-API/"/>
    
  </entry>
  
</feed>
