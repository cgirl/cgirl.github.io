[{"title":"nginx的常用配置与属性","url":"%2F2020%2F09%2F09%2Fnginx%2Fnginx200610%2F","content":"# 命令行指令\n重载-不重新启动nginx的情况下，重新加载新修改的配置文件：\nnginx -s reload\n\n热部署-业务需要，nginx重新编译增加了新的第三方模块，但是线上环境正在运行，不能冒昧的重启nginx，因为有很多正常请求的还未结束，这种场景下可以使用热部署方式。新产生的请求使用新的nginx，而老的请求暂时使 1000用老的nginx，等待全部老请求执行完毕，再关闭老的nginx：\ncp nginx nginx.old\nkill -USR2 nginx的主进程号\nkill -WINCH nginx的主进程号\n","tags":["nginx"],"categories":["技术架构"]},{"title":"区块链带来的新机遇","url":"%2F2017%2F12%2F17%2Fqkl%2Fqukuailian171218%2F","content":"\n# 第2章 区块链带来的新机遇\n## 数字货币产业链\n## 互联网金融\n## 物联网与共享经济\n## 新一代基础设施\n\n# 第3章 区块链的应用场景\n## 数字货币\n## 众筹\n## 清算、结算与审计\n## 智能合约\n## 版权与许可\n## 公证与记录\n\n# 第4章 区块链技术原理\n## 密码学基础\n## 区块链组成\n## 共识算法\n## 侧链技术\n","tags":["读书摘录 区块链"],"categories":["区块链:定义未来金融与经济新格局"]},{"title":"区块链是什么","url":"%2F2017%2F12%2F17%2Fqkl%2Fqukuailian171217%2F","content":"## 记账货币\n\n区块链的本质是一种去中心化的记账系统，而比特币正是这个系统上承载的“以数字形式存在”的货币。我们可以认为区块链与比特币之间的关系就是凯恩斯所说的记账货币与货币之间的关系，也可以用菲利克斯-马丁对货币的理解来说明两者的关系--比特币只是记账的表征，而区块链就是背后的一套由信用记录以及用心记录的清算构成的体系。\n\n## 天才的发明\n\n要了解比特币的内在优雅。不是软件使得比特币如此有效，而是经济学。--罗比特-沃伦斯基\n\n因为账本上的内容必须是唯一的，所以就导致记账是一种天然的中心化行为。在通信手段不发达的时代，这是必然的选择；在如今的信息时代，中心化的记账方式依然覆盖了社会的方方面面。然而，中心化的记账却有一些显而易见的弱点：一旦这个中心出现问题，如被篡改、被损坏，整个系统就会面临危机乃至崩溃。\n\n这种中心化的记账方式对中心本身的能力、相应的监管法律和手段以及参与者对其的信任都有极高的要求。\n\n那么区块链是靠怎样的架构设计最终解决了去中心化记账的难题呢？竞争记账机制成为了解决问题的关键。\n这里我们先引入一个称为“节点”的概念。在当前的信息时代，负责记账的自然是计算机，而在记账系统中接入的每一台计算机都可以称作节点。\n\n所谓的竞争记账，就是以每个节点的计算能力（“算力”）来竞争记账权的一种机制。在比特币系统中，大约每十分钟进行一轮算力竞赛，竞赛的胜利者获得一次记账的权利，即向区块链这个总账本写入一个新区块的权利。这样，在一定时间内，只有竞争的胜利者才能完成一轮记账并向其他节点同步新增账本信息，这个过程就是区块产生的过程。\n\n不过，算力竞争是要付出成本的，没有激励，节点就没有进行竞争的动力。在中本聪的设计里，每轮竞争胜出并完成记账的节点将可以获得系统给予的一定数量的比特币奖励。这个奖励的过程同时也是比特币的发行过程。节点不停的进行计算，以期获得系统发放的比特币。\n\n最终，区块链通过构造一个竞争-记账-奖励为核心的经济系统，解决了去中心化记账的难题。比特币借助区块链打造了一个正向循环的经济系统，才使得起在没有强大的中心化机构或组织推动的情况下，自然的生长出来并发展壮大。\n\n## 共识机制与价值载体\n\n比特币区块链的共识机制是通过工作证明（POW）来实现的，这种机制的优点是显而易见的，每个节点可以平等地参与竞争，并通过激励构建了一个正循环的经济系统，从而逐渐积累了保护系统安全的庞大算力。\n\n然而对工作量证明机制也有一些批评。一个常见的指责是“浪费”能源，因为节点进行算力竞赛是要消耗电力的。目前，投入挖矿竞争的总算力以及接近投入挖矿竞争的总算力以及接近1300P，挖矿也因此成了能源秘籍型的行业。\n\n所谓公有链，是指比特币区块链这样的完全去中心化的、不受任何机构控制的区块链；而私有链则是指存在一定的中心化控制的区块链。\n\n类似比特币区块链这样的公有链尚不能满足金融机构的一些基本要求，比如了解你的客户（KYC）、反洗钱（AML）等，因此，金融机构对私有链的兴趣更大。目前私有链最著名的例子是R3CEV公司牵头的区块链联名，它已经吸引了全球四十多家大型银行的加入，其中不乏美国银行、摩根大通等巨头的身影。\n\n事实上，自比特币诞生之日起，它的模仿者或者竞争者就层出不穷。其中有很多都只是对比特币简单的复制和模仿，没有任何创新，我们将这种成为山寨币。还有一些并不是简单的模仿，而是有自己的创新和专注的领域，这种类型的币我们称之为竞争币。在数字货币的市值方面，尽管比特币遥遥领先，但之后诞生的莱特币、以太坊的市值都蹭短暂地超过10亿美元。\n\n数字资产和区块链具有天然的亲和性。一般意义上讲，数字资产包含任何形式的以二进制格式存在并且具备所有权属性的东西。而在较为狭义的理解中，数字资产则是指以电子数据形式存在的，在日常生活中持有以备出售的非货币性资产，比如典型是股票、债券等金融产品。\n\n如果说比特币等基于区块链的数字货币是一个刚诞生不久的婴儿，那么基于区块链的非货币形式的价值承载则还是一个孕育中的胚胎。作为价值载体，区块链可以承载的价值是非常丰富的。随着区块链技术的发展和相关基础设施的不断完善，我们相信区块链承载价值的范围不断扩大。\n\n## 当交易变得智能\n\n比特币的脚本语言非常简单，仅有256条指令，其中75个是被保留的，尚未被赋予任何含义。比特币脚本中的指令与其他编程语言类似，包含基本的语法、逻辑。除此之外还包括一些加密指令，如哈密函数、签名验证等。\n\n比特币的多重签名技术就是使用脚本实现可变成交易的一个典型例子。其基本原理是，在系统里创建一个由多个人共同管理的账户，只有达到事先约定数量的人的同意，才能动用该账户的钱，并且这个过程是由系统本身保障执行的，不需要任何第三方介入。\n\n一般来说，一个比特币地址对应一个私钥，动用这个地址中的资金只需要该私钥的掌握者单独发起签名即可。而多重签名技术就是多个私钥的共同签名才能动用一笔资金。比如说，某笔资金对应3个私钥，而必须至少有其中任意2个私钥参与签名才能动用，只有1个私钥参与签名是无效的。这个2/3可以推广到任意的m/n，比如3/5，4/7,6/11等，当然m要小于等于n。\n\n从本质上讲，智能合约工作原理类似于计算机程序的条件执行语句。当一个预先编好的条件被触发时，智能合约执行相关的合同条款。由于区块链的可编程性，因此智能合约在区块链和数字货币上的应用是水到渠成的事情。\n\n智能合约是计算机程序，所以很容易应用于其他需要的场景--增加更加细致的控制条件，完成更复杂的执行逻辑。这点类似传统的合同，我们也可以认为，智能合约就是合同以代码的形式搬到了区块链上，但这就带来了根本的区别：它不需要任何人监督合同的执行，订立合同的双方也无法在合同完成前单方面违约，一切都是按合同的约定自动执行的。相信随着区块链的普及和交易智能化的发展，它将会对未来的交易模式与商业结构带来巨大的影响。\n\n## 将区块链连接起来\n\n中本聪创造区块链的初衷是为了实现一个点对点的电子现金系统。因此，当我们对于区块链的用途有更高的期待时，它的一些局限就体现出来了。\n\n本质上，区块链是不同数字价值的载体，而侧链技术则是连接不同区块链的通路。现在还不能断言最终成熟的侧链技术形态，甚至我们也不知道未来真正大规模应用于区块链件连接的技术是否会以“侧链技术”的名义出现，但是侧链技术的理念及核心功能的发展与成熟是毋庸置疑的。\n\n## 区块链的未来\n","tags":["读书摘录 区块链"],"categories":["区块链:定义未来金融与经济新格局"]},{"title":"必然的出现","url":"%2F2017%2F11%2F12%2Fqkl%2Fqukuailian171214%2F","content":"\njunely-渡渡君目前从事互联网金融，那做互金的小伙伴都知道，最近炒的热火朝天，朝天热火的莫过于“区块链”先森了。我这么猴急追求前沿技术的M子，岂能坐视无为？那必须走起啊，必须要追上“区块链”先森的，说走咱就走。接下来要介绍两本关于区块链的书籍，首先精读第一本书《区块链:定义未来金融与经济新格局》。\n\n![封面](/image/qukuanlian/区块链:定义未来金融与经济新格局.jpg)\n\n本书一共有5章，我们且慢慢道来，junely-渡渡君将里面自认精华的部分摘录出来，因此后续内容均来源于此书摘录，版权归原作者所有哦～\n\n目前世界上几乎所有国家的货币都已是信用货币。信用货币是货币发展中的现代形态,不再代表任何贵金属,并且其本身价值远远低于货币价值,已经和商品属性彻底脱钩。\n\n在实物货币阶段,货币以实物商品的形式表现出来。从表面上看货币是有价值的商品,但是,人们出卖商品换取实物货币时需要的不是实物货币本身,而是实物货币交换其他商品的能力,即购买力。换句话说,人们之所以能接受实物货币,本质上并不是因为实物货币是有价值的商品,而是因为其相信实物货币是信用的象征,它可以提供一般购买力。所以无论是实物货币还是信用货币,信用都是货币更为本职的属性。也可以说,信用是货币的创造者。\n\n互联网的核心精神是开放、共享、去中心化、自下而上、多元价值等，这些说法没有错，但绝不是由于互联网的出现才产生的，而是因为市场这只看不见的手导致人类社会本身就是有这种天然倾向。技术的进步导致交流更为高效，这样的强项也就被进一步放大。所谓互联网精神，只是由于拥有了新的信息传递工作，是人类行为的自然投射。\n\n信用是制造货币的真正原材料。而区块链通过构造一个可以量化信用的经济系统，使得一个点对点的电子现金系统--比特币的出现成为可能。或者说，区块链创造了一个数字化的、可以点对点传输价值的信用系统。\n","tags":["读书摘录 区块链"],"categories":["区块链:定义未来金融与经济新格局"]},{"title":"nginx配置","url":"%2F2017%2F07%2F13%2Fngnix%2F","content":"\n# nginx配置\n\n## 文件路径配置\n\n- 访问首页\n\n  > 语法： index file1 file2 file3 ... ;<br>\n  > 配置块： http, server, location\n\n<!-- more -->\n\n- HTTP错误码重定向页面\n\n  > 语法： error_page code[code1 code2 ...][=|answer_code=]uri|@named_location;<br>\n  > 配置块： http, server, location, if\n\n- 是否允许递归使用error_page\n\n  > 语法： recursive_error_page [on|off];<br>\n  > 配置块： http，server，location\n\n- try_files\n\n## 内存及磁盘资源分配\n\n- HTTP包体只存储到磁盘文件中\n\n  > 语法： client_body_only_in_file on|off|clean;<br>\n  > 配置块： http，server，location\n\n- HTTP包体尽量写到一个内存buffer中\n\n  > 语法： client_body_in_single_buffer size;<br>\n  > 配置块： http，server\n\n- 存储超大HTTP头部的内存buffer的大小\n\n  > 语法： large_client_header_buffers number size;<br>\n  > 配置块： http，server\n\n- 存储HTTP包体的内存buffer的大小\n\n  > 语法： large_client_body_buffer_size size;<br>\n  > 配置块： http，server，location\n\n- HTTP的临时存放目录\n\n  > 语法： client_body_temp_path dirpath[level1[level2[level2]]];<br>\n  > 配置块： http，server，location\n\n- 建立TCP链接预配内存池初始化大小\n\n  > 语法： connect_pool_size size;<br>\n  > 配置块： http，server\n\n- 请求预配内存池大小\n\n  > 语法: request_pool_size size;<br>\n  > 配置块: http, server\n\n## 网络连接的设置\n\n- 读取HTTP头部的超时时间\n\n  > 语法: client_header_timeout time;（默认单位:秒）<br>\n  > 配置块: http, server, location\n\n- 读取HTTP包体的超时时间\n\n  > 语法: client_body_timeout time;（默认单位:秒）<br>\n  > 配置块: http, server, location\n\n- 发送响应的超时时间\n\n  > 语法: send_timeout time;<br>\n  > 配置块: http, server, location\n\n- 发送RST包来重置连接\n\n  > 语法: reset_timeout_connection on|off;<br>\n  > 配置块: http, server, location\n\n- 关闭用户的连接方式\n\n  > 语法： lingering_close on|off|always<br>\n  > 配置块： http, server, location\n\n- 关闭用户的链接方式的延迟时间\n\n  > 语法： lingering_time time;<br>\n  > 配置块： http, server, location\n\n- 无数据情况下关闭用户链接的超时时间\n\n  > 语法： lingering_timeout time;<br>\n  > 配置块： http, server, location\n\n- 禁用多个http请求复用同一个http长链接（禁用keepalive功能）\n\n  > 语法： keepalive_disable [msie6|safria|none]...;<br>\n  > 配饰块： http, server, location\n\n- keepalive超时时间\n\n  > 语法： keepalive_timeout time;<br>\n  > 配置块： http, server, location\n\n- 一个keepalive长连接上允许承载的最大请求数\n\n  > 语法： keepalive_requests n;<br>\n  > 配置块： http, server, location\n\n- 对keepalive是否启用TCP_NODELAY选项\n\n  > 语法： tcp_nodelay on|off;<br>\n  > 配置块： http, server, location\n\n- 是否开启FreeBSD系统上的TCP_NOPUSH或linux系统上的TCP_CORK功能\n\n  > 语法： tcp_nopush on|off;<br>\n  > 配置块： http, server, location\n\n## MIME类型的设置\n\n- MIME type与文件扩展映射\n> 语法： type {...};<br>\n> 配置块： http, server, location\n\n- 默认MIME type\n > 语法: default_type MIME-type;  \n > 配置块: http, server, location\n\n- MIME type散列桶占用内存的大小\n > 语法: types_hash_bucket_size size;  \n > 配置块: http, server, location\n\n- MIME type散列桶占用最大内存的大小\n > 语法: type_hash_max_size size;  \n > 配置块: http, server, location\n\n## 对客户端请求的限制\n- 按HTTP方法名限制用户请求\n > 语法: limit_except method ... {...};  \n > 配置块: location\n\n- HTTP请求包体的最大值\n > 语法: clinet_max_body_size size;\n > 配置块: http、server、location\n\n- 对请求的速度\n > 语法: limit_rate speed;\n > 配置块: http、server、location、if\n\n- 对请求限速的延迟市场\n> 语法: limit_rate_after time;  \n> 配置块: http、server、location、if\n\n\n## 文件操作的优化\n- sendfile系统调用\n> 语法: sendfile on|off;  \n> 配置块: http、server、location\n\n- AIO系统调用\n> 语法: aio on|off;  \n> 配置块: http, server, location\n\n- directio(linux系统以O_DIRECT方式只读文件,缓冲区大小)\n> 语法: directio size|off;  \n> 配置块: http, server, location\n\n- directio方式读取文件时的对齐方式\n> 语法: directio_alignment size;  \n> 配置块: http, server, location\n\n- 打开缓存功能\n> 语法: open_file_cache max=N[inactive=time]|off;  \n> 配置块: http, server, location\n\n- 是否缓存打开文件错误信息\n> 语法: open_file_cache_errors on|off;  \n> 配置块: http, server, location\n\n- 不被淘汰的最小次数\n> 语法: open_file_cache_min_users number;  \n> 配置块: http, server, location\n\n- 检验缓存中元素有效性的频率\n> 语法: open_file_cache_valid time;  \n> 配置块: http, server, location\n\n\n## 对客户端请求的特殊处理\n- 忽略不合法的HTTP头部\n> 语法: ignore_invalid_headers on|off;  \n> 配置块: http, server\n\n- HTTP头部是否允许下划线\n> 语法: underscores_in_headers on|off;  \n> 配置块: http, server, location\n\n- 对If-Modified-Since头部的策略处理\n> 语法: if_modified_since [off|exact|before];  \n> 配置块: http, server, location\n\n- 文件未找到时是否记录到error日志\n> 语法: log_not_fount off|on;  \n> 配置块: http, server, location\n\n- 是否匹配相邻的'/'\n> 语法: merge_slashes on|off;  \n> 配置块: http, server, location\n\n- DNS解析地址\n> 语法: resolver address ...;  \n> 配置块: http, server, location\n\n- DNS解析地址超时时间\n> 语法: resolver_timeout time;  \n> 配置块: http, server, location\n\n- 返回错误页面时,是否在Server中注明nginx版本\n> 语法: server_tokens on|off;  \n> 配置块: http, server, location\n\n## ngx_http_core_module模块提供的变量\n![访问上游服务器时可使用的变量](/image/nginx/访问上游服务器时可使用的变量.png)\n\n## 反向代理服务器的基本原理\n基本原来的流程图如下：\n\n![反向代理服务器转发请求流程](/image/nginx/反向代理服务器转发请求流程.png)\n\n## 负载均衡的基本配置\n- upstream块\n> 语法: upstream name {...};  \n> 配置块: http  \n\n- server  \n> 语法: server name [parameters];  \n> 配置块: upstream\n\n- ip_hash\n> 语法: ip_hash;  \n> 配置块: upstream\n\n- 样例:\n```nginx\nupstream tianshenjr {  \n\n    #ip_hash; 说明:与weight不可共存;\n\n    server dev.tianshenjr.com weight=4;  \n    server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;  \n    server unix:/tmp/api.tianshenjr.com;  \n}  \nserver {  \n    location / {  \n        proxy_pass http://www.tianshenjr.com  \n    }  \n}\n```\n\n- 记录日志时支持的变量\n\n\n## 反向代理的基本配置\n\n- proxy_pass\n> 语法: proxy_pass URL;  \n> 配置块: location, if\n\n- proxy_method\n> 语法: proxy_method method;  \n> 配置块: http, server, location\n\n- proxy_hide_header\n> 语法: proxy_hide_header the_header;  \n> 配置块: http, server, location\n\n- proxy_pass_header\n> 语法: proxy_pass_header the_header;  \n> 配置块: http, server, location\n\n- proxy_pass_request_body\n> 语法: proxy_pass_request_body on|off;  \n> 配置块: http, server, location\n\n- proxy_pass_request_headers\n> 语法: proxy_pass_request_headers on|off;  \n> 配置块: http, server, location\n\n- proxy_redirect\n> 语法: proxy_redirect [default|off|redirect replacement];  \n> 配置块: http, server, location\n\n- proxy_next_upstream\n> 语法: proxy_next_upstream [error|timeout|invalid_header|http_500|http_502|http_503|http_504|http_404|off];\n> 配置块: http, server, location\n\n扩展阅读\n   http://wiki.nginx.org/Modules\n\n\n# 开发HTTP模块\n## 如何调用HTTP模块\n![http模块调用简化流程](/image/nginx/nginx http模块调用简化流程.png)\n\n## 类型封装\n- 整型\n```C\ntypedef intptr_t ngx_int_t;\ntypedef uintptr_t ngx_uint_t;\n```\n\n- ngx_str_t 数据结构\n```C\ntypedef struct{\n    size_t      len;\n    u_char      *data;\n} ngx_str_t;\n```\n\n- ngx_list_t 数据结构\n```C\ntypedef struct ngx_list_part_s ngx_list_part_t;\n\nstruct ngx_list _part_s{\n    void                *elts;\n    ngx_uint_t          nelts;\n    ngx_list_part_t     *next;\n};\n\ntypedef struct{\n    ngx_list_part_t     *last;\n    ngx_list_part_t     part;\n    size_t              size;\n    ngx_unit_t          nalloc;\n    ngx_pool_t          *pool;\n} ngx_list_t;\n```\n- ngx_table_elt_t 数据结构\n- ngx_buf_t 数据结构\n- ngx_chain_t 数据结构\n","tags":["nginx 负载均衡 配置"],"categories":["nginx"]},{"title":"lumen建立API项目","url":"%2F2017%2F07%2F08%2Flumen%2F","content":"#lumen环境搭建（5.4.X 版本）\n\n## composer及lumen安装\n环境: mac or linux\n\n- 使用如下命令进行comoser的安装:  \n1. curl -sS https://getcomposer.org/installer | php\n2. mv composer.phar /usr/local/bin/  \n3. 输入composer回车,能正常展示composer的版本及使用方法,即安装成功\n\n<!-- more -->\n\n- 使用如下命令进行lumen的项目创建及环境配置\n1. composer create-project --prefer-dist laravel/lumen 项目名称  \n   说明:  \n   1) 时间可能会有些长,请耐心等待,如果长时间依然没有创建成功。  \n   2) 请更换国内镜像或升级composer  \n   更换国内镜像: composer config -g repo.packagist composer https://packagist.phpcomposer.com）  \n   升级composer: composer selfupdate\n\n2. 配置数据库信息:  \n   lumen的项目配置信息都保存在.env文件中,修改相应的数据库配置信息:\n   ```php\n   DB_CONNECTION=mysql\n   DB_HOST=127.0.0.1  【项目的mysql数据库服务器地址】\n   DB_PORT=3306       【mysql对应的端口号】\n   DB_DATABASE=mabei  【mysql的数据库名称】\n   DB_USERNAME=root   【mysql的用户名】\n   DB_PASSWORD=root   【mysql的密码】\n   ```\n","tags":["php 框架 lumen API"],"categories":["lumen框架"]}]